(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{469:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6장-데이터-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6장-데이터-타입"}},[t._v("#")]),t._v(" 6장 데이터 타입")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("데이터 타입(data type)")]),t._v("은 값의 종류를 말한다.")]),t._v(" "),a("li",[a("code",[t._v("자바스크립트(ES6)")]),t._v("는 7개의 데이터 타입을 제공한다. 7개의 데이터 타입은 "),a("code",[t._v("원시 타입 (primitive type)")]),t._v("과 "),a("code",[t._v("객체 타입(object/referenc type)")]),t._v("으로 분류할수있다.")])]),t._v(" "),a("h2",{attrs:{id:"_1-숫자-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-숫자-타입"}},[t._v("#")]),t._v(" 1. 숫자 타입")]),t._v(" "),a("ul",[a("li",[t._v("C 나 자바의 경우, 정수와 실수를 구분해서 int, long, float, double등과 같은 다양한 숫자 타입을 제공한다. 하지만 자바스크립트는 독특하게 하나의 숫자 타입만 존재한다.")]),t._v(" "),a("li",[t._v("ECMAScript 사양에 따르면 숫자 타입의 값은 배정밀도 64비트 부동소수점 형식을 따른다. 즉, 모든 수를 "),a("code",[t._v("실수")]),t._v("로 처리하며, 정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않는다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 숫자 타입은 모두 실수로 처리된다.")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.5")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-문자열-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-문자열-타입"}},[t._v("#")]),t._v(" 2. 문자열 타입")]),t._v(" "),a("ul",[a("li",[t._v("다른 타입의 값과 달리 문자열을 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰과 구분하기 위해서다. 만약 문자열을 따옴표로 깜사지 않으면 자바스크립트 엔진은 키워드나 식별자 같은 토큰으로 인식한다.")]),t._v(" "),a("li",[t._v("자바스크립트의 문자열은 "),a("code",[t._v("원시 타입.")]),t._v(" 즉 , "),a("code",[t._v("변경 불가능한 값(immutable value)")]),t._v("이다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 따옴표로 감싸지 않은 hello를 식별자로 인식한다.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-1-템플릿-리터럴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-템플릿-리터럴"}},[t._v("#")]),t._v(" 2.1 템플릿 리터럴")]),t._v(" "),a("ul",[a("li",[t._v("ES6부터 "),a("code",[t._v("템플릿 리터럴(template literal)")]),t._v("이라고 하는 새로운 문자열 표기법이 도입되었다. 템플릿 리터럴은 "),a("code",[t._v("멀티라인 문자열")]),t._v(", "),a("code",[t._v("표현식 삽입")]),t._v(", "),a("code",[t._v("테그드 템플릿")]),t._v(" 등 편리한 문자열 처리 기능을 제공한다.")]),t._v(" "),a("li",[t._v("템플릿 리터럴은 일반 무자열과 비슷해 보이지만 "),a("code",[t._v("백틱(``)")]),t._v("을 사용해 표현한다.")])]),t._v(" "),a("h4",{attrs:{id:"멀티라인-문자열"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#멀티라인-문자열"}},[t._v("#")]),t._v(" 멀티라인 문자열")]),t._v(" "),a("ul",[a("li",[t._v("일반 문자열 내에서는 줄바꿈(개행)이 허용되지 않는다. 따라서 일반 문자열 내에서 줄바꿈 등의 공백을 표현할려면 "),a("code",[t._v("백슬래시(\\)")]),t._v("로 시작하는 "),a("code",[t._v("이스케이프 시퀀스")]),t._v("를 사용해야한다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(' "Hello\nWorld'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" `"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError: Invalid or unexpected token")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("예를 들어, 줄바꿈과 들여쓰기가 적용된 HTML 문자열은 다음과 같이 이스케이프 시퀀스를 사용해 작성한다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<ul>\\n\\t<li><a href =\"#\">Home</a></li>\\n</ul>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <ul>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  <li><a href="#">Home</a></li>')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// </ul>")]),t._v("\n")])])]),a("ul",[a("li",[t._v("일반 문자열과 달리 템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 줄바꿈이 허용되며, "),a("code",[t._v("모든 공백")]),t._v("도 있는 그대로 적용된다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('<ul>\n    <li><a href="#">Home</a></li>\n</ul>')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <ul>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  <li><a href="#">Home</a></li>')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// </ul>")]),t._v("\n")])])]),a("h4",{attrs:{id:"표현식-삽입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#표현식-삽입"}},[t._v("#")]),t._v(" 표현식 삽입")]),t._v(" "),a("ul",[a("li",[t._v("문자열은 문자열 연산자 +를 사용해 연결할 수 있다. + 연산자는 피연산자 중 하나 이상이 뭄ㄴ자열인 경우 문자열 연결 연산자로 동작한다.")]),t._v(" "),a("li",[t._v("템플릿 리터럴 내에서는 "),a("code",[t._v("표현식 삽입")]),t._v("을 통해 간단히 문자열을 삽입할 수 있다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ung-mo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" last "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lee"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6: 표현식 삽입")]),t._v("\n console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("My name is ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("last"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// My name is Ung-mo Lee.")]),t._v("\n")])])]),a("h2",{attrs:{id:"불리언-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#불리언-타입"}},[t._v("#")]),t._v(" 불리언 타입")]),t._v(" "),a("ul",[a("li",[t._v("불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 false뿐이다.")])]),t._v(" "),a("h2",{attrs:{id:"undefined-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-타입"}},[t._v("#")]),t._v(" undefined 타입")]),t._v(" "),a("ul",[a("li",[t._v("undefined 타입의 값은 undefined가 유일하다.")]),t._v(" "),a("li",[t._v("var 키워드로 선언한 변수는 암묵적으로 "),a("code",[t._v("undefined")]),t._v("로 초기화된다. 다시 말해, 변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이뤄질 때까지 "),a("code",[t._v("빈상태로 내버려두지 않고")]),t._v(" 자바스크립트 엔진이 "),a("code",[t._v("undefined")]),t._v("로 초기화한다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"null-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-타입"}},[t._v("#")]),t._v(" null 타입")]),t._v(" "),a("ul",[a("li",[t._v("프로그래미어 언어에서 null은 변수 값이 없다는 것을 "),a("code",[t._v("의도적으로 명시(의도적 부재)")]),t._v("할 때 사용한다.")]),t._v(" "),a("li",[t._v("변수에 null을 할당하는 것은 변수가 "),a("code",[t._v("이전에 참조하던 값")]),t._v("을 "),a("code",[t._v("더이상 참조하지 않겠다")]),t._v("는 의미다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lee"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 이전 참조를 제거. foo변수는 더 이상 "Lee"를 참조하지 않는다.')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 유용해 보이지는 않는다. 변수의 스코프를 좁게 만들어 변수 자체를 재빨리 소며시키는 편이 낫다.")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"심벌-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#심벌-타입"}},[t._v("#")]),t._v(" 심벌 타입")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("심벌(symbol)")]),t._v("은 ES6에서 추가된 7번째 타입으로, "),a("code",[t._v("변경 불가능한")]),t._v(" 원시 타입의 값이다. 심벌 값은 다른 값과 중복되지 않는 유일무이한 값이다.")]),t._v(" "),a("li",[t._v("주로 이름이 충돌할 위험이 없는 "),a("code",[t._v("객체의 유일한 프로퍼티 키")]),t._v("를 만들기 위해 사용된다.")]),t._v(" "),a("li",[t._v("심벌은 "),a("code",[t._v("함수")]),t._v("를 호출해 생성한다.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 심벌 값 생성")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 객체 생성")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 이름이 충돌할 위험이 없는 유일무이한 값인 심벌을 프로퍼티 키로 사용한다.")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value ")]),t._v("\n")])])]),a("h2",{attrs:{id:"객체-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-타입"}},[t._v("#")]),t._v(" 객체 타입")]),t._v(" "),a("ul",[a("li",[t._v("자바스크립트의 데이터 타입은 크게 "),a("code",[t._v("원시 타입")]),t._v("과 "),a("code",[t._v("객체 타입")]),t._v("으로 분류한다.")]),t._v(" "),a("li",[t._v("자바스크립트는 객체 기반의 언어이며, "),a("code",[t._v("자바스크립트를 이루고 있는 거의 모든 것이 객체라")]),t._v("는 것이다.")])]),t._v(" "),a("h2",{attrs:{id:"데이터-타입의-필요성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-타입의-필요성"}},[t._v("#")]),t._v(" 데이터 타입의 필요성")]),t._v(" "),a("ul",[a("li",[t._v("값을 저장할 때 확보해야 하는 "),a("code",[t._v("메모리 공간의 크기")]),t._v("를 결정하기 위해")]),t._v(" "),a("li",[t._v("값을 참조할 때 한 번에 읽어 들여야 할 "),a("code",[t._v("메모리 공간의 크기")]),t._v("를 결정하기 위해")]),t._v(" "),a("li",[t._v("메모리에서 읽어 들인 "),a("code",[t._v("2진수를 어떻게 해석")]),t._v("할지 결정하기 위해")])]),t._v(" "),a("h2",{attrs:{id:"동적-타이핑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#동적-타이핑"}},[t._v("#")]),t._v(" 동적 타이핑")]),t._v(" "),a("ul",[a("li",[t._v("C 나 자바 같은 "),a("code",[t._v("정적 타입 (static/strong type)언어")]),t._v("는 변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉 "),a("code",[t._v("데이터 타입을 사전에 선언")]),t._v("해야한다. 정적 타입 "),a("code",[t._v("언어는 변수의 타입을 변경할 수 없으며")]),t._v(", 변수에 선언한 타입에 맞는 값만 할당할 수 있다.")]),t._v(" "),a("li",[t._v("자바스크립트의 변수는 선언이 아닌 할당에 의해 "),a("code",[t._v("타입이 결정(타입 추론)")]),t._v("된다. 그리고 재할당에 의해 변수의 타입은 "),a("code",[t._v("언제든지 동적으로 변할 수 있다")]),t._v(".")]),t._v(" "),a("li",[t._v("동적 타입 언어는 "),a("code",[t._v("유연성(flexibility)")]),t._v("은 높지만 "),a("code",[t._v("신뢰성(reliability)")]),t._v("는 떨어진다.")])])])}),[],!1,null,null,null);s.default=e.exports}}]);